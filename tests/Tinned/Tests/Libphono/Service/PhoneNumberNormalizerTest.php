<?php

namespace Tinned\Tests\Libphono\Service;

use Tinned\Libphono\DataProvider\SQLiteDataProvider;
use Tinned\Libphono\PhoneNumber;
use Tinned\Libphono\Service\LibphonoService;

/**
 * Class PhoneNumberNormalizerTest
 *
 * @package Tinned\Tests\Libphono\Service
 */
class PhoneNumberNormalizerTest extends \PHPUnit\Framework\TestCase
{

    protected $dbPath;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->dbPath = dirname(__FILE__) . '/../../../../../resources/Country_Information.sqlite3';
    }

    public function test_phoneNumberNormalizer()
    {
        $service = new LibphonoService(
            new SQLiteDataProvider($this->dbPath)
        );

        $test_cases = array();

        $test_file_path = dirname(__FILE__).'/1001_phone_number_testcases.csv';
        $test_file_handle = fopen($test_file_path, 'r');
        $this->assertNotFalse($test_file_handle, "error opening test csv file: $test_file_path");

        $row = 1;
        $test_case_index = 0;
        while(($data = fgetcsv($test_file_handle, 1000, $delimiter = ',', $enclosure = '"')) !== FALSE)
        {
            $num = count($data);
//            $GLOBALS['DBG']->debug2("$num fields in line $row : $num");
            $row++;
            if($row <= 2)
            {
                continue;
            }

            //$GLOBALS['DBG']->debug2("no field : {$data[0]}");
            $test_cases[$test_case_index]['no'] = $data[0];

            //$GLOBALS['DBG']->debug2("country_3-letter field : {$data[1]}");
            $test_cases[$test_case_index]['country'] = $data[1];

            //$GLOBALS['DBG']->debug2("ok field : {$data[2]}");
            $test_cases[$test_case_index]['ok'] = $data[2];

            if(isset($data[3]))
            {
                //$GLOBALS['DBG']->debug2("debug field : {$data[3]}");
                $test_cases[$test_case_index]['debug'] = ($data[3] == 0 ? false : true);
            }

            if(isset($data[4]))
            {
                //$GLOBALS['DBG']->debug2("known field : {$data[4]}");
                $test_cases[$test_case_index]['known'] = ($data[4] == 0 ? false : true);
            }

            if(isset($data[5]))
            {
                $test_cases[$test_case_index]['fail_reason'] = $data[5];
            }

            $test_case_index++;
        }

        fclose($test_file_handle);

        $result_count = count($test_cases);

        for($i = 0; $i<$result_count; ++$i)
        {
            if(isset($test_cases[$i]['debug']) && $test_cases[$i]['debug'] === TRUE)
            {
                $debug = 2;
                $output_debug_info = TRUE;
            }

            $fail_reason = NULL;
            if(isset($test_cases[$i]['fail_reason']) && empty($test_cases[$i]['fail_reason']) === FALSE)
            {
                $fail_reason = $test_cases[$i]['fail_reason'];
            }

            $phone_number_obj = $service->getPhoneNumber(
                $test_cases[$i]['no'],
                $test_cases[$i]['country'],
                PhoneNumber::INPUT_ISO_3166_ALPHA3
            );

            $result = $phone_number_obj->getNormalizedNumber();

            if (empty($fail_reason)) {
                $this->assertEquals($test_cases[$i]['ok'], $result, "Test $i Failed");
            } else {
                $this->assertNotEmpty($result, "Test $i Failed: $fail_reason");
            }

            $phone_number_obj = NULL;
            unset($phone_number_obj);
        }
    }
}
